/* Import Design Tokens */
@import './design-tokens.css';

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Legacy CSS Variables for Backward Compatibility */
:root {
  /* Map new design tokens to legacy variables */
  --background: var(--color-background-primary);
  --foreground: var(--color-text-primary);
  --card: var(--color-background-elevated);
  --card-foreground: var(--color-text-primary);
  --popover: var(--color-background-elevated);
  --popover-foreground: var(--color-text-primary);
  --primary: var(--color-interactive-primary);
  --primary-foreground: var(--color-text-inverse);
  --secondary: var(--color-interactive-secondary);
  --secondary-foreground: var(--color-text-primary);
  --muted: var(--color-background-secondary);
  --muted-foreground: var(--color-text-tertiary);
  --accent: var(--color-background-secondary);
  --accent-foreground: var(--color-text-primary);
  --destructive: var(--color-interactive-destructive);
  --destructive-foreground: var(--color-text-inverse);
  --success: var(--color-success-500);
  --success-foreground: var(--color-text-inverse);
  --warning: var(--color-warning-500);
  --warning-foreground: var(--color-text-inverse);
  --border: var(--color-border-primary);
  --input: var(--color-border-primary);
  --ring: var(--color-border-focus);
  --radius: var(--radius-lg);
}

@layer base {
  /* Custom spacing variables */
  :root {
    --spacing-xs: 0.25rem;
    --spacing-sm: 0.5rem;
    --spacing-md: 1rem;
    --spacing-lg: 1.5rem;
    --spacing-xl: 2rem;
    
    /* Custom typography variables */
    --font-size-xs: 0.75rem;
    --font-size-sm: 0.875rem;
    --font-size-base: 1rem;
    --font-size-lg: 1.125rem;
    --font-size-xl: 1.25rem;
    
    /* Custom shadow variables */
    --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  }

  .dark {
    /* Dark mode overrides are now handled in design-tokens.css */
    /* Legacy variables are automatically updated through CSS custom property inheritance */
  }
}

@layer base {
  * {
    border-color: hsl(var(--border));
  }
  
  html {
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
  }
  
  body {
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
    margin: 0;
    padding: 0;
    min-height: 100vh;
  }
  
  #root {
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
    min-height: 100vh;
  }
  
  /* Debug: Ensure theme classes are applied */
  .light {
    --debug-theme: 'light';
  }
  
  .dark {
    --debug-theme: 'dark';
  }
  
  /* Debug: Visual indicator for theme changes */
  .light body {
    border-top: 3px solid #10b981; /* Green border for light theme */
  }
  
  .dark body {
    border-top: 3px solid #3b82f6; /* Blue border for dark theme */
  }
  
  /* Force dark mode styles */
  .dark {
    color-scheme: dark;
  }
  
  .light {
    color-scheme: light;
  }
  
  /* Ensure all elements inherit theme colors */
  .dark * {
    color: inherit;
  }
  
  .light * {
    color: inherit;
  }
  
  /* Force theme application */
  .dark html,
  .dark body,
  .dark #root {
    background-color: hsl(var(--background)) !important;
    color: hsl(var(--foreground)) !important;
  }
  
  .light html,
  .light body,
  .light #root {
    background-color: hsl(var(--background)) !important;
    color: hsl(var(--foreground)) !important;
  }
  
  /* Ensure theme classes override everything */
  .dark {
    background-color: hsl(var(--background)) !important;
    color: hsl(var(--foreground)) !important;
  }
  
  .light {
    background-color: hsl(var(--background)) !important;
    color: hsl(var(--foreground)) !important;
  }
  
/* Additional visual indicators for debugging */
.light {
  --theme-indicator: 'LIGHT';
}

.dark {
  --theme-indicator: 'DARK';
}

/* Link button specific styles */
.ax-button-link {
  background: none !important;
  background-color: transparent !important;
  border: none !important;
  padding: 0 !important;
  height: auto !important;
  font-weight: normal !important;
  box-shadow: none !important;
  border-radius: 0 !important;
  display: inline-block !important;
  align-items: flex-start !important;
  justify-content: flex-start !important;
  white-space: normal !important;
  min-height: 0 !important;
  min-width: 0 !important;
  color: hsl(var(--color-interactive-primary)) !important;
  text-decoration: underline !important;
  text-underline-offset: 4px !important;
}

.ax-button-link:hover {
  background: none !important;
  background-color: transparent !important;
  text-decoration: underline !important;
}

.ax-button-link:focus {
  background: none !important;
  background-color: transparent !important;
  outline: none !important;
  box-shadow: none !important;
}

.ax-button-link:active {
  background: none !important;
  background-color: transparent !important;
}

/* AxLabel color variants */
.ax-label-default {
  color: #000000 !important;
}

.ax-label-muted {
  color: #6B7280 !important;
}

.ax-label-primary {
  color: #3B82F6 !important;
}

.ax-label-secondary {
  color: #6B7280 !important;
}

.ax-label-destructive {
  color: #EF4444 !important;
}

.ax-label-success {
  color: #10B981 !important;
}

/* Force AxLabel colors with high specificity using CSS tokens */
span[data-variant="primary"] {
  color: rgb(var(--color-primary-600)) !important;
}

span[data-variant="destructive"] {
  color: rgb(var(--color-error-600)) !important;
}

span[data-variant="success"] {
  color: rgb(var(--color-success-600)) !important;
}

span[data-variant="warning"] {
  color: rgb(var(--color-warning-600)) !important;
}

span[data-variant="muted"] {
  color: rgb(var(--color-neutral-500)) !important;
}

span[data-variant="secondary"] {
  color: rgb(var(--color-neutral-500)) !important;
}

span[data-variant="default"] {
  color: rgb(var(--color-neutral-900)) !important;
}
  
  /* Ensure smooth transitions for all theme-dependent properties */
  * {
    transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease;
  }
}

/* Manual Tailwind utility classes for AxButton component */
.inline-flex { display: inline-flex; }
.items-center { align-items: center; }
.justify-center { justify-content: center; }
.whitespace-nowrap { white-space: nowrap; }
.rounded-md { border-radius: calc(var(--radius) - 2px); }
.text-sm { font-size: 0.875rem; line-height: 1.25rem; }
.font-medium { font-weight: 500; }
.transition-colors { transition-property: color, background-color, border-color, text-decoration-color, fill, stroke; transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); transition-duration: 150ms; }
.focus-visible\:outline-none:focus-visible { outline: 2px solid transparent; outline-offset: 2px; }
.focus-visible\:ring-2:focus-visible { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color); box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000); }
.focus-visible\:ring-ring:focus-visible { --tw-ring-color: hsl(var(--ring)); }
.focus-visible\:ring-offset-2:focus-visible { --tw-ring-offset-width: 2px; }
.disabled\:pointer-events-none:disabled { pointer-events: none; }
.disabled\:opacity-50:disabled { opacity: 0.5; }

/* Button variants - Removed duplicates, using the ones below */
.border { border-width: 1px; }
/* Font weight classes */
.font-thin { font-weight: 100; }
.font-light { font-weight: 300; }
.font-normal { font-weight: 400; }
.font-medium { font-weight: 500; }
.font-semibold { font-weight: 600; }
.font-bold { font-weight: 700; }
.font-black { font-weight: 900; }

/* Font size classes */
.text-xs { font-size: 0.75rem; line-height: 1rem; }
.text-sm { font-size: 0.875rem; line-height: 1.25rem; }
.text-base { font-size: 1rem; line-height: 1.5rem; }
.text-lg { font-size: 1.125rem; line-height: 1.75rem; }
.text-xl { font-size: 1.25rem; line-height: 1.75rem; }
.text-2xl { font-size: 1.5rem; line-height: 2rem; }

/* Responsive text */
@media (min-width: 640px) {
  .sm\:text-sm { font-size: 0.875rem; line-height: 1.25rem; }
}
@media (min-width: 1024px) {
  .lg\:text-base { font-size: 1rem; line-height: 1.5rem; }
}

/* Text color classes */
.text-foreground { color: hsl(var(--foreground)); }
.text-muted-foreground { color: hsl(var(--muted-foreground)); }
.text-primary { color: hsl(var(--primary)); }
.text-secondary-foreground { color: hsl(var(--secondary-foreground)); }
.text-destructive { color: hsl(var(--destructive)); }
.text-success { color: hsl(var(--success)); }
.text-warning { color: hsl(var(--warning)); }
.underline-offset-4 { text-underline-offset: 4px; }
.hover\:underline:hover { text-decoration-line: underline; }

/* Button sizes */
.h-6 { height: 1.5rem; }
.px-2 { padding-left: 0.5rem; padding-right: 0.5rem; }
.py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; }
.text-xs { font-size: 0.75rem; line-height: 1rem; }
.h-8 { height: 2rem; }
.px-3 { padding-left: 0.75rem; padding-right: 0.75rem; }
.py-1\.5 { padding-top: 0.375rem; padding-bottom: 0.375rem; }
.h-10 { height: 2.5rem; }
.px-4 { padding-left: 1rem; padding-right: 1rem; }
.py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
.h-11 { height: 2.75rem; }
.px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }
.py-2\.5 { padding-top: 0.625rem; padding-bottom: 0.625rem; }
.text-base { font-size: 1rem; line-height: 1.5rem; }
.h-12 { height: 3rem; }
.px-8 { padding-left: 2rem; padding-right: 2rem; }
.py-3 { padding-top: 0.75rem; padding-bottom: 0.75rem; }
.text-lg { font-size: 1.125rem; line-height: 1.75rem; }
.h-14 { height: 3.5rem; }
.px-10 { padding-left: 2.5rem; padding-right: 2.5rem; }
.py-4 { padding-top: 1rem; padding-bottom: 1rem; }
.text-xl { font-size: 1.25rem; line-height: 1.75rem; }
.w-10 { width: 2.5rem; }
.w-8 { width: 2rem; }
.w-12 { width: 3rem; }

/* Button widths */
.w-auto { width: auto; }
.w-full { width: 100%; }
.w-fit { width: fit-content; }
.w-1\/2 { width: 50%; }
.w-1\/3 { width: 33.333333%; }
.w-2\/3 { width: 66.666667%; }
.w-1\/4 { width: 25%; }
.w-3\/4 { width: 75%; }
.w-min { width: min-content; }
.w-max { width: max-content; }

/* Card padding classes */
.card-padding-sm {
  padding: var(--spacing-md) !important;
}

.card-padding-default {
  padding: var(--spacing-lg) !important;
}

.card-padding-lg {
  padding: var(--spacing-xl) !important;
}

/* Additional Tailwind utilities for cards */
.p-4 { padding: 1rem; }
.p-6 { padding: 1.5rem; }
.p-8 { padding: 2rem; }
.pt-0 { padding-top: 0; }
.rounded-lg { border-radius: 0.5rem; }
.border { border-width: 1px; }
.bg-card { background-color: hsl(var(--card)); }
.text-card-foreground { color: hsl(var(--card-foreground)); }
.border-border { border-color: hsl(var(--border)); }

/* Debug styles for card variants */
.card-variant-default {
  border: 1px solid hsl(var(--border)) !important;
  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05) !important;
}

.card-variant-outline {
  border: 2px solid hsl(var(--border)) !important;
  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05) !important;
}

.card-variant-ghost {
  border: 1px solid transparent !important;
  box-shadow: none !important;
}

.card-variant-elevated {
  border: 1px solid hsl(var(--border)) !important;
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(0, 0, 0, 0.05) !important;
  transform: translateY(-2px) !important;
  transition: all 0.3s ease !important;
  background: linear-gradient(145deg, hsl(var(--card)) 0%, hsl(var(--card) / 0.95) 100%) !important;
}

.card-variant-elevated:hover {
  box-shadow: 0 35px 60px -12px rgba(0, 0, 0, 0.35), 0 0 0 1px rgba(0, 0, 0, 0.1) !important;
  transform: translateY(-4px) !important;
}
.shadow-sm { 
  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05) !important; 
}
.shadow-md { 
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06) !important; 
}
.shadow-lg { 
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05) !important; 
}
.shadow-xl { 
  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(0, 0, 0, 0.05) !important; 
}
.shadow-none { 
  box-shadow: none !important; 
}
.border-2 { border-width: 2px !important; }
.border-transparent { border-color: transparent !important; }

/* Modal utilities */
.fixed { position: fixed; }
.inset-0 { top: 0; right: 0; bottom: 0; left: 0; }
.z-50 { z-index: 50; }
.z-\[9999\] { z-index: 9999; }
.items-center { align-items: center; }
.items-start { align-items: flex-start; }
.justify-center { justify-content: center; }
.justify-end { justify-content: flex-end; }
.relative { position: relative; }
.mx-4 { margin-left: 1rem; margin-right: 1rem; }
.mx-0 { margin-left: 0; margin-right: 0; }
.w-full { width: 100%; }
.h-full { height: 100%; }
.max-w-sm { max-width: 24rem; }
.max-w-md { max-width: 28rem; }
.max-w-lg { max-width: 32rem; }
.max-w-xl { max-width: 36rem; }
.max-w-none { max-width: none; }
.bg-white { background-color: hsl(var(--card)); }
.dark\:bg-gray-900 { background-color: hsl(var(--card)); }
.border-gray-200 { border-color: hsl(var(--border)); }
.dark\:border-gray-700 { border-color: hsl(var(--border)); }
.space-y-1\.5 > * + * { margin-top: 0.375rem !important; }
.gap-2 { gap: 0.5rem; }
.text-lg { font-size: 1.125rem; line-height: 1.75rem; }
.text-xl { font-size: 1.25rem; line-height: 1.75rem; }
.text-2xl { font-size: 1.5rem; line-height: 2rem; }
.leading-none { line-height: 1; }
.tracking-tight { letter-spacing: -0.025em; }
.text-muted-foreground { color: hsl(var(--muted-foreground)); }
.bg-black\/50 { background-color: rgba(0, 0, 0, 0.5); }
.bg-black\/25 { background-color: rgba(0, 0, 0, 0.25); }
.bg-black\/75 { background-color: rgba(0, 0, 0, 0.75); }
.bg-transparent { background-color: transparent; }

/* DataTable utilities */
.w-full { width: 100%; }
.caption-bottom { caption-side: bottom; }
.text-sm { font-size: 0.875rem; line-height: 1.25rem; }
.text-xs { font-size: 0.75rem; line-height: 1rem; }
.text-base { font-size: 1rem; line-height: 1.5rem; }
.border-collapse { border-collapse: collapse; }
.border { border-width: 1px; }
.border-b { border-bottom-width: 1px; }
.border-t { border-top-width: 1px; }
.border-border { border-color: hsl(var(--border)); }
.h-12 { height: 3rem; }
.px-4 { padding-left: 1rem; padding-right: 1rem; }
.text-left { text-align: left; }
.align-middle { vertical-align: middle; }
.font-medium { font-weight: 500; }
.text-muted-foreground { color: hsl(var(--muted-foreground)); }
.p-4 { padding: 1rem; }
.p-2 { padding: 0.5rem; }
.p-1 { padding: 0.25rem; }
.py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
.py-8 { padding-top: 2rem; padding-bottom: 2rem; }
.pl-10 { padding-left: 2.5rem; }
.pr-4 { padding-right: 1rem; }
.text-center { text-align: center; }
.text-right { text-align: right; }
.cursor-pointer { cursor: pointer; }
.cursor-not-allowed { cursor: not-allowed; }
.disabled\:opacity-50:disabled { opacity: 0.5; }
.disabled\:cursor-not-allowed:disabled { cursor: not-allowed; }
.hover\:bg-muted\/50:hover { background-color: hsl(var(--muted) / 0.5); }
.hover\:bg-muted:hover { background-color: hsl(var(--muted)); }
.hover\:underline:hover { text-decoration-line: underline; }
.data-\[state\=selected\]\:bg-muted[data-state="selected"] { background-color: hsl(var(--muted)); }
.bg-muted { background-color: hsl(var(--muted)); }
.bg-muted\/50 { background-color: hsl(var(--muted) / 0.5); }
.bg-background { background-color: hsl(var(--background)); }
.border-input { border-color: hsl(var(--input)); }
.rounded-md { border-radius: 0.375rem; }
.rounded { border-radius: 0.25rem; }
.rounded-full { border-radius: 9999px; }
.flex { display: flex !important; }
.flex-col { flex-direction: column !important; }
.flex-1 { flex: 1 1 0% !important; }
.items-center { align-items: center; }
.justify-center { justify-content: center; }
.justify-between { justify-content: space-between; }
.justify-end { justify-content: flex-end; }
.gap-1 { gap: 0.25rem; }
.gap-2 { gap: 0.5rem; }
.gap-4 { gap: 1rem; }
.max-w-sm { max-width: 24rem; }
.relative { position: relative; }
.absolute { position: absolute; }
.left-3 { left: 0.75rem; }
.top-1\/2 { top: 50%; }
.transform { transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }
.-translate-y-1\/2 { --tw-translate-y: -50%; }
.h-4 { height: 1rem; }
.w-4 { width: 1rem; }
.h-8 { height: 2rem; }
.w-8 { width: 2rem; }
.w-12 { width: 3rem; }
.animate-pulse { animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }
.stop-propagation { stop-propagation: true; }
.col-span-full { grid-column: 1 / -1; }

/* Button utilities - Using CSS variables for proper theme support */
.bg-primary { 
  background-color: hsl(var(--primary));
}
.text-primary-foreground { 
  color: hsl(var(--primary-foreground));
}
.hover\:bg-primary\/90:hover { 
  background-color: hsl(var(--primary) / 0.9);
}
.bg-destructive { 
  background-color: hsl(var(--destructive));
}
.text-destructive-foreground { 
  color: hsl(var(--destructive-foreground));
}
.hover\:bg-destructive\/90:hover { 
  background-color: hsl(var(--destructive) / 0.9);
}
.bg-secondary { 
  background-color: hsl(var(--secondary));
}
.text-secondary-foreground { 
  color: hsl(var(--secondary-foreground));
}
.hover\:bg-secondary\/80:hover { 
  background-color: hsl(var(--secondary) / 0.8);
}
.bg-background { 
  background-color: hsl(var(--background));
}
.border-input { 
  border-color: hsl(var(--input));
}
.hover\:bg-accent:hover { 
  background-color: hsl(var(--accent));
}
.hover\:text-accent-foreground:hover { 
  color: hsl(var(--accent-foreground));
}
.text-primary { 
  color: hsl(var(--primary));
}
/* Card component specific styles */
.card-header {
  display: flex !important;
  flex-direction: column !important;
  gap: 0.375rem !important;
}

.card-header > * {
  display: block !important;
}

/* Test classes for ButtonPage - Using CSS variables for theme support */
.bg-blue-500 { background-color: hsl(var(--primary)); }
.text-white { color: hsl(var(--primary-foreground)); }
.rounded { border-radius: 0.25rem; }
.hover\:bg-blue-600:hover { background-color: hsl(var(--primary) / 0.9); }
.bg-red-100 { background-color: hsl(var(--destructive) / 0.1); }
.text-red-800 { color: hsl(var(--destructive)); }
.p-4 { padding: 1rem; }
.space-y-4 > * + * { margin-top: 1rem; }
